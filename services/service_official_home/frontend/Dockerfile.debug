# 디버깅용 강화된 Dockerfile
FROM node:18-alpine AS base

# 의존성 설치 단계
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

# 빌드 단계 - 강화된 디버깅
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules

# 모든 파일 복사
COPY . .

# === 디버깅 정보 출력 ===
RUN echo "=== 현재 작업 디렉토리 ===" && pwd
RUN echo "=== 루트 디렉토리 내용 ===" && ls -la
RUN echo "=== components 디렉토리 확인 ===" && ls -la components/ || echo "components 디렉토리 없음"
RUN echo "=== components/sections 디렉토리 확인 ===" && ls -la components/sections/ || echo "components/sections 디렉토리 없음"
RUN echo "=== app 디렉토리 확인 ===" && ls -la app/ || echo "app 디렉토리 없음"
RUN echo "=== tsconfig.json 확인 ===" && cat tsconfig.json || echo "tsconfig.json 없음"
RUN echo "=== package.json 확인 ===" && cat package.json | head -20

# 빌드 전 경로 별칭 테스트
RUN echo "=== Next.js 경로 별칭 테스트 ===" 
RUN npx next build --dry-run || echo "드라이런 실패"

# 실제 빌드
ENV NEXT_TELEMETRY_DISABLED=1
RUN npm run build

# 프로덕션 단계
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs
EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "server.js"] 